package com.ssoft.aplanproject.adapter;

import android.content.Context;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.BaseAdapter;
import android.widget.Button;
import android.widget.TextView;

import com.ssoft.aplanproject.R;
import com.ssoft.aplanproject.util.LogApp;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.List;

/**
 * Created by SSoft-13 on 16-06-2016.
 */
public class GridCellAdapter extends BaseAdapter implements View.OnClickListener
{
    private static final String tag = "GridCellAdapter";
    private final Context _context;
    TextView[] textview;
    private final List<String> arraylistDates;
    private final List<String> arraylistfinalDates;
    private static final int DAY_OFFSET = 1;
    private final String[] weekdays = new String[] { "Sun", "Mon", "Tue","Wed", "Thu", "Fri", "Sat" };
    private final String[] months = { "January", "February", "March","April", "May", "June", "July", "August", "September","October", "November", "December" };
    private final String[] monthsNUmber = {"1","2","3","4","5","6","7","8","9","10","11","12"};
    private final int[] daysOfMonth = { 31, 28, 31, 30, 31, 30, 31, 31, 30,31, 30, 31 };
    private int daysInMonth;
    private int currentDayOfMonth;
    private int currentWeekDay;
    private Button gridcell;
    private TextView num_events_per_day;
    private final HashMap<String, Integer> eventsPerMonthMap;
    private final SimpleDateFormat dateFormatter = new SimpleDateFormat("dd-MMM-yyyy");

    public List<Integer> selectedPositions;

    // Days in Current Month
    public GridCellAdapter(Context context, int textViewResourceId, int month, int year)
    {
        super();
        this._context = context;
        this.arraylistDates = new ArrayList<String>();
        this.arraylistfinalDates = new ArrayList<String>();
        selectedPositions = new ArrayList<>();
        Log.d(tag, "==> Passed in Date FOR Month: " + month + " "+ "Year: " + year);
        Calendar calendar = Calendar.getInstance();
        setCurrentDayOfMonth(calendar.get(Calendar.DAY_OF_MONTH));
        setCurrentWeekDay(calendar.get(Calendar.DAY_OF_WEEK));
        Log.d(tag, "New Calendar:= " + calendar.getTime().toString());
        Log.d(tag, "CurrentDayOfWeek :" + getCurrentWeekDay());
        Log.d(tag, "CurrentDayOfMonth :" + getCurrentDayOfMonth());

        // Print Month
        printMonth(month, year);

        // Find Number of Events
        eventsPerMonthMap = findNumberOfEventsPerMonth(year, month);
    }

    private String getMonthAsString(int i)
    {
        return months[i];
    }
    private String getMonthAsNumber(int i)
    {
        return  monthsNUmber[i];
    }

    private String getWeekDayAsString(int i)
    {
        return weekdays[i];
    }

    private int getNumberOfDaysOfMonth(int i)
    {
        return daysOfMonth[i];
    }

    public String getItem(int position)
    {
        return arraylistDates.get(position);
    }

    @Override
    public int getCount()
    {
        return arraylistDates.size();
    }

    /**
     * Prints Month
     *
     * @param mm
     * @param yy
     */
    private void printMonth(int mm, int yy)
    {
        Log.d(tag, "==> printMonth: mm: " + mm + " " + "yy: " + yy);
        int trailingSpaces = 0;
        int daysInPrevMonth = 0;
        int prevMonth = 0;
        int prevYear = 0;
        int nextMonth = 0;
        int nextYear = 0;

        int currentMonth = mm - 1;
        String currentMonthName = getMonthAsString(currentMonth);
        daysInMonth = getNumberOfDaysOfMonth(currentMonth);

        Log.d(tag, "Current Month: " + " " + currentMonthName + " having "+ daysInMonth + " days.");

        GregorianCalendar cal = new GregorianCalendar(yy, currentMonth, 1);
        Log.d(tag, "Gregorian Calendar:= " + cal.getTime().toString());

        if (currentMonth == 11)
        {
            prevMonth = currentMonth - 1;
            daysInPrevMonth = getNumberOfDaysOfMonth(prevMonth);
            nextMonth = 0;
            prevYear = yy;
            nextYear = yy + 1;
            Log.d(tag, "*->PrevYear: " + prevYear + " PrevMonth:"
                    + prevMonth + " NextMonth: " + nextMonth
                    + " NextYear: " + nextYear);
        } else if (currentMonth == 0)
        {
            prevMonth = 11;
            prevYear = yy - 1;
            nextYear = yy;
            daysInPrevMonth = getNumberOfDaysOfMonth(prevMonth);
            nextMonth = 1;
            Log.d(tag, "**--> PrevYear: " + prevYear + " PrevMonth:"
                    + prevMonth + " NextMonth: " + nextMonth
                    + " NextYear: " + nextYear);
        } else
        {
            prevMonth = currentMonth - 1;
            nextMonth = currentMonth + 1;
            nextYear = yy;
            prevYear = yy;
            daysInPrevMonth = getNumberOfDaysOfMonth(prevMonth);
            Log.d(tag, "***---> PrevYear: " + prevYear + " PrevMonth:"
                    + prevMonth + " NextMonth: " + nextMonth
                    + " NextYear: " + nextYear);
        }

        int currentWeekDay = cal.get(Calendar.DAY_OF_WEEK) - 1;
        trailingSpaces = currentWeekDay;

        Log.d(tag, "Week Day:" + currentWeekDay + " is "
                + getWeekDayAsString(currentWeekDay));
        Log.d(tag, "No. Trailing space to Add: " + trailingSpaces);
        Log.d(tag, "No. of Days in Previous Month: " + daysInPrevMonth);

        if (cal.isLeapYear(cal.get(Calendar.YEAR)))
            if (mm == 2)
                ++daysInMonth;
            else if (mm == 3)
                ++daysInPrevMonth;

        // Trailing Month days
        for (int i = 0; i < trailingSpaces; i++)
        {
            Log.d(tag,"PREV MONTH:= "+ prevMonth+ " => "+ getMonthAsString(prevMonth)+ " "+ String.valueOf((daysInPrevMonth- trailingSpaces + DAY_OFFSET)+ i));
            /// adding trailing to main arraylistMain
            arraylistDates.add(String.valueOf((daysInPrevMonth - trailingSpaces + DAY_OFFSET)+ i)+ "-GREY"+ "-"
                    + getMonthAsNumber(prevMonth)
                    + "-"
                    + prevYear);
            arraylistfinalDates.add(daysInPrevMonth+"-"+getMonthAsNumber(prevMonth)+"-"+prevYear);
        }

        // Current Month Days
        for (int i = 1; i <= daysInMonth; i++)
        {
            Log.d(currentMonthName, String.valueOf(i) + " "+ getMonthAsString(currentMonth) + " " + yy);
            if (i == getCurrentDayOfMonth())
            {
                /// for today date
                arraylistDates.add(String.valueOf(i) + "-BLUE" + "-"+ getMonthAsNumber(currentMonth) + "-" + yy);
                arraylistfinalDates.add(String.valueOf(i)+"-"+getMonthAsNumber(currentMonth)+"-"+yy);
            }
            else
            {
                /// for remain dates of month
                arraylistDates.add(String.valueOf(i) + "-WHITE" + "-"+ getMonthAsNumber(currentMonth) + "-" + yy);
                arraylistfinalDates.add(String.valueOf(i)+"-"+getMonthAsNumber(currentMonth)+"-"+yy);
            }
        }

        // Leading Month days
        for (int i = 0; i < arraylistDates.size() % 7; i++)
        {
            Log.d(tag, "NEXT MONTH:= " + getMonthAsString(nextMonth));
            arraylistDates.add(String.valueOf(i + 1) + "-GREY" + "-"+ getMonthAsNumber(nextMonth) + "-" + nextYear);
            arraylistfinalDates.add(String.valueOf(i + 1)+"-"+getMonthAsNumber(nextMonth)+"-"+nextYear);
        }
    }

    /**
     * NOTE: YOU NEED TO IMPLEMENT THIS PART Given the YEAR, MONTH, retrieve
     * ALL entries from a SQLite database for that month. Iterate over the
     * List of All entries, and get the dateCreated, which is converted into
     * day.
     *
     * @param year
     * @param month
     * @return
     */
    private HashMap<String, Integer> findNumberOfEventsPerMonth(int year,int month)
    {
        HashMap<String, Integer> map = new HashMap<String, Integer>();

        return map;
    }

    @Override
    public long getItemId(int position)
    {
        return position;
    }

    @Override
    public View getView(int position, View convertView, ViewGroup parent){
        //GridItemView customView = (convertView == null) ? new GridItemView(_context) : (GridItemView) convertView;
        View row = convertView;
        if (row == null)
        {
            LayoutInflater inflater = (LayoutInflater) _context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
            row = inflater.inflate(R.layout.item_list_grid, parent, false);
        }

        textview = new TextView[arraylistfinalDates.size()];

        textview[position] = (TextView)row.findViewById(R.id.text);

        String[] SplitedDay = arraylistDates.get(position).split("-");
        String[] splitedFinalDate = arraylistfinalDates.get(position).split("-");
        String theday = SplitedDay[0];
        String themonth = SplitedDay[2];
        String theyear = SplitedDay[3];
        LogApp.e(" $$$$$$ "," the day varialble : "+theday+" : "+splitedFinalDate+ " : "+arraylistfinalDates.get(position));
        //customView.display(splitedFinalDate[0], selectedPositions.contains(position));
        //customView.setTag(theday+"-"+themonth+"-"+theyear);
        textview[position].setText(splitedFinalDate[0]);
        if(selectedPositions.contains(position)){
            textview[position].setBackgroundResource(R.drawable.green_square);
        }
        else {
            textview[position].setBackgroundResource(0);
        }
        return row;
    }
    /*{
        View row = convertView;
        if (row == null)
        {
            LayoutInflater inflater = (LayoutInflater) _context
                    .getSystemService(Context.LAYOUT_INFLATER_SERVICE);
            row = inflater.inflate(R.layout.screen_gridcell, parent, false);
        }

        // Get a reference to the Day gridcell
        gridcell = (Button) row.findViewById(R.id.calendar_day_gridcell);
        gridcell.setOnClickListener(this);

        // ACCOUNT FOR SPACING

        Log.d(tag, "Current Day: " + getCurrentDayOfMonth());
        String[] day_color = arraylistDates.get(position).split("-");
        String theday = day_color[0];
        String themonth = day_color[2];
        String theyear = day_color[3];
        if ((!eventsPerMonthMap.isEmpty()) && (eventsPerMonthMap != null))
        {
            if (eventsPerMonthMap.containsKey(theday)) {
                num_events_per_day = (TextView) row
                        .findViewById(R.id.num_events_per_day);
                Integer numEvents = (Integer) eventsPerMonthMap.get(theday);
                num_events_per_day.setText(numEvents.toString());
            }
        }

        // Set the Day GridCell
        gridcell.setText(theday);
        gridcell.setTag(theday + "-" + themonth + "-" + theyear);
        Log.d(tag, "Setting GridCell " + theday + "-" + themonth + "-"
                + theyear);

        if (day_color[1].equals("GREY"))
        {
            gridcell.setTextColor(_context.getResources().getColor(R.color.lightgray));
        }
        if (day_color[1].equals("WHITE"))
        {
            gridcell.setTextColor(_context.getResources().getColor(R.color.lightgray02));
        }
        if (day_color[1].equals("BLUE"))
        {
            gridcell.setTextColor(_context.getResources().getColor(R.color.orrange));
        }
        return row;
    }*/



    @Override
    public void onClick(View view)
    {
        String date_month_year = (String) view.getTag();
        //selectedDayMonthYearButton.setText("Selected: " + date_month_year);
        Log.e("Selected date", date_month_year);
        try
        {
            Date parsedDate = dateFormatter.parse(date_month_year);
            Log.d(tag, "Parsed Date: " + parsedDate.toString());

        } catch (ParseException e)
        {
            e.printStackTrace();
        }
    }

    public int getCurrentDayOfMonth()
    {
        return currentDayOfMonth;
    }

    private void setCurrentDayOfMonth(int currentDayOfMonth)
    {
        this.currentDayOfMonth = currentDayOfMonth;
    }

    public void setCurrentWeekDay(int currentWeekDay)
    {
        this.currentWeekDay = currentWeekDay;
    }

    public int getCurrentWeekDay() {
        return currentWeekDay;
    }
}
