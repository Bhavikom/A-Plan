package com.ssoft.aplanproject.util;

import android.app.Activity;
import android.app.AlertDialog;
import android.app.DatePickerDialog;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.graphics.Bitmap;
import android.graphics.ColorFilter;
import android.graphics.ColorMatrix;
import android.graphics.ColorMatrixColorFilter;
import android.graphics.Rect;
import android.graphics.Typeface;
import android.graphics.drawable.Drawable;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.text.TextUtils;
import android.util.DisplayMetrics;
import android.util.Log;
import android.view.Display;
import android.view.TouchDelegate;
import android.view.View;
import android.view.Window;
import android.view.WindowManager;
import android.view.inputmethod.InputMethodManager;
import android.widget.DatePicker;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.SearchView;
import android.widget.Toast;

import com.ssoft.aplanproject.Model.ProfileModelClass;
import com.ssoft.aplanproject.timesquare.MonthCellDescriptor;

import java.io.ByteArrayOutputStream;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Random;
import java.util.regex.Matcher;
import java.util.regex.Pattern;


public class GlobalClass
{

	private static interfaceDateSelected callerActivity;
	public static SimpleDateFormat dateFormater = new SimpleDateFormat("dd.MM.yyyy");
	public static boolean isEditMode=false;
	public static List<MonthCellDescriptor> selectedCellsTemp = new ArrayList<>();
	public static List<Calendar> selectedCalsTemp = new ArrayList<>();
	public static boolean isFirstDate=false;
	//public static boolean isStartAndEndSelected =false;
	public static Date selectedStartdate=null,selectedEnddate=null;
	public static String URL_HEADER_MAIN="http://project.ssoft.in:8090/management";
	//public static String URL_HEADER_MAIN ="http://pmstesting.ssoft.in:8085//management";
	//public static String URL_HEADER_MAIN="http://78.46.120.30/BerndTesting/management";
	public static String URL_HEADER_USER = URL_HEADER_MAIN +"/User";
	public static String URL_HEADER_GET = URL_HEADER_MAIN +"/Get/";
	public static String URL_HEADER_FOLDER= URL_HEADER_MAIN +"/Tasks";
	public static String LOGIN_URL="http://138.201.245.106/Aplan/management/Get";
	public static String selectedTab="";
	public static Bitmap bitmapBackground;
	public static boolean isViewpager=false;
	public static Bitmap bitmap;
	public static final String EMAIL_PATTERN = "^[_A-Za-z0-9-]+(\\.[_A-Za-z0-9-]+)*@[A-Za-z0-9]+(\\.[A-Za-z0-9]+)*(\\.[A-Za-z]{2,})$";
	public static String response_logout="";
	// Shared Preferences
	public SharedPreferences prefLogin;
	public SharedPreferences prefComefrom;
	public SharedPreferences prefUserType;
	public static String comefrom="";
	// Editor for Shared preferences
	Editor editor;
	Editor editorUsertype;
	private static final String IS_LOGIN = "IsLoggedIn";
	public static final String KEY_USER_ID = "user_id";
	// Sharedpref file name
	private static final String PREF_NAME = "Assenta";
	private static final String USER_TYPE = "user_type";
	// Shared pref mode
	int PRIVATE_MODE = 0;
	
	public static Typeface fontStyle;
	
	public static Context context;
	public static int SCREEN_HEIGHT;
	public static int SCREEN_WIDTH;	
	public static ProgressDialog progressDialog;
	public static final String PASSWORD_PATTERN = "((?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%]).{6,20})";
	public static Pattern pattern;
	public static Matcher matcher;
	public GlobalClass(){
		
	}
	public GlobalClass(interfaceDateSelected activity) {
		callerActivity = (interfaceDateSelected) activity;
	}
	public GlobalClass(Context context)
	{
		GlobalClass.context = context;
		DisplayMetrics displaymetrics = new DisplayMetrics();
		((Activity) context).getWindowManager().getDefaultDisplay().getMetrics(displaymetrics);
		SCREEN_HEIGHT = displaymetrics.heightPixels;
		SCREEN_WIDTH = displaymetrics.widthPixels;

		// for login preferences
		prefLogin = context.getSharedPreferences(PREF_NAME, PRIVATE_MODE);
		editor = prefLogin.edit();

		// for user type preferences
		prefUserType=context.getSharedPreferences("USER_TYPE",PRIVATE_MODE);
		editorUsertype=prefUserType.edit();
		
		prefComefrom=context.getSharedPreferences("COMEFROM",PRIVATE_MODE);

		
	}
	public static int screenWidth(Context con){
		DisplayMetrics displaymetrics = new DisplayMetrics();
		((Activity) con).getWindowManager().getDefaultDisplay().getMetrics(displaymetrics);
		SCREEN_WIDTH = displaymetrics.widthPixels;
		return SCREEN_WIDTH;
	}
	public static int screenHeight(Context con){
		DisplayMetrics displaymetrics = new DisplayMetrics();
		((Activity) con).getWindowManager().getDefaultDisplay().getMetrics(displaymetrics);
		SCREEN_HEIGHT = displaymetrics.heightPixels;
		return SCREEN_HEIGHT;
	}

	public static boolean isEmailValid(String email) {
	    boolean isValid = false;

	    String expression = "^[\\w\\.-]+@([\\w\\-]+\\.)+[A-Z]{2,4}$";
	    CharSequence inputStr = email;

	    Pattern pattern = Pattern.compile(expression, Pattern.CASE_INSENSITIVE);
	    Matcher matcher = pattern.matcher(inputStr);
	    if (matcher.matches()) {
	        isValid = true;
	    }
	    return isValid;
	}
	public static boolean isNetworkAvailable(Context context) {
	    ConnectivityManager connectivityManager = (ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);
	    NetworkInfo activeNetworkInfo = connectivityManager.getActiveNetworkInfo();
	    return activeNetworkInfo != null && activeNetworkInfo.isConnected();
	}
	public static void showProgressDialog(Activity activity)
	{
		progressDialog= new ProgressDialog(activity);
		progressDialog.setMessage("Please Wait...");
		progressDialog.setCancelable(false);
		progressDialog.show();
	}

	public static void dismissProgressDialog()
	{
		Log.v("11111","dismiss progress dialog :"+progressDialog);
		try {
			if(progressDialog != null){
				progressDialog.dismiss();
			}
		} catch (Exception e) {
			Log.v(""," in catch in global method for progress: : "+e.toString());
		}
		
		
	}
	public static void showToast(Activity activity, String text)
	{
		Toast.makeText(activity,text, Toast.LENGTH_SHORT).show();
	}
	public static void showToastInternet(Activity activity, String text)
	{
		Toast.makeText(activity,"Please check internet connection.", Toast.LENGTH_SHORT).show();
	}
	public static void showToastInternet(Activity activity)
	{
		Toast.makeText(activity,"Please check internet connection", Toast.LENGTH_SHORT).show();
	}
	public static void showToastEmail(Activity activity)
	{
		Toast.makeText(activity,"Please enter valid email address", Toast.LENGTH_SHORT).show();
	}
	public static void showToastField(Activity activity)
	{
		Toast.makeText(activity,"Please fill all the required fields", Toast.LENGTH_SHORT).show();
	}
	public static String epochTimeToDate(String time){
		String date="";
		SimpleDateFormat sdf = new SimpleDateFormat("dd.MM.yyyy");
		date=sdf.format(new Date(Long.parseLong(time)));
		return  date;
	}
	public static  String epochFormatetoString(String time){
		String date="";
		if(!TextUtils.isEmpty(time)){
			String splited = time.substring(6);
			String finalString = splited.substring(0,splited.length()-2);
			String[] Splite = finalString.split("\\+");

			date=Splite[0];
		}

		return date;
	}

	public static String dateFormateChanged(Date date)
	{
		SimpleDateFormat formatter = new SimpleDateFormat("dd.MM.yyyy");
		String dateString = formatter.format(date);

		return dateString;
	}
	public static long getEpochTime()
	{
		long ephoch;
		long millysec = System.currentTimeMillis();
		ephoch = millysec/1000;
		return ephoch;
	}
	public static int sumFromString(String str)
	{
		int sum = 0;
		for(int i = 0; i < str.length() ; i++){
			if( Character.isDigit(str.charAt(i)) ){
				sum = sum + Character.getNumericValue(str.charAt(i));
			}
		}
		return sum;
	}
	public static int getRandomNumber(){
		Random r = new Random();
		int Low = 10;
		int High = 100;
		int Result = r.nextInt(High-Low) + Low;

		return Result;
	}

	public static Date changedDateFormate(Date date1)
	{
		Date date = null;
		try
		{
			date=dateFormater.parse(convertDateToString(date1));
		}
		catch (ParseException e)
		{
			e.printStackTrace();
		}

		return date;
	}
	public static String dateFormateChanged2(Date date)
	{
		SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
		String dateString = formatter.format(date);

		return dateString;
	}
	public static void showAlertDialog(Activity activity, String message, String title) {
		AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(activity);

		// set title

		alertDialogBuilder.setTitle(title);

		// set dialog message
		alertDialogBuilder.setMessage(message).setCancelable(false)

		.setNegativeButton("Ok", new DialogInterface.OnClickListener() {
			public void onClick(DialogInterface dialog, int id) {
				// if this button is clicked, just close
				// the dialog box and do nothing
				dialog.cancel();
			}
		});

		// create alert dialog
		AlertDialog alertDialog = alertDialogBuilder.create();

		// show it
		alertDialog.show();

	}

	public static void alertDialog(Activity activity, String message) {
		AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(activity);

		// set title

		// alertDialogBuilder.setTitle(title);

		// set dialog message
		alertDialogBuilder.setMessage(message).setCancelable(false)

		.setNegativeButton("Ok", new DialogInterface.OnClickListener() {
			public void onClick(DialogInterface dialog, int id) {
				// if this button is clicked, just close
				// the dialog box and do nothing
				dialog.cancel();
			}
		});

		// create alert dialog
		AlertDialog alertDialog = alertDialogBuilder.create();

		// show it
		alertDialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
		alertDialog.show();
		// alertDialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
	}
	public static void alertDialogInternet(Activity activity) {
		AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(activity);

		// set title

		// alertDialogBuilder.setTitle(title);

		// set dialog message
		alertDialogBuilder.setMessage("Please check internet connection.").setCancelable(false)

		.setNegativeButton("Ok", new DialogInterface.OnClickListener() {
			public void onClick(DialogInterface dialog, int id) {
				// if this button is clicked, just close
				// the dialog box and do nothing
				dialog.cancel();
			}
		});

		// create alert dialog
		AlertDialog alertDialog = alertDialogBuilder.create();

		// show it
		alertDialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
		alertDialog.show();
		// alertDialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
	}

	public static Runnable getTouchDelegateAction(final View parent, final View delegate, final int topPadding, final int bottomPadding, final int leftPadding, final int rightPadding) {
		return new Runnable()
		{
	        @Override
	        public void run() 
	        {
	            
	            //Construct a new Rectangle and let the Delegate set its values
	            Rect touchRect = new Rect();
	            delegate.getHitRect(touchRect);
	            
	            //Modify the dimensions of the Rectangle
	            //Padding values below zero are replaced by zeros
	            touchRect.top-= Math.max(0, topPadding);
	            touchRect.bottom+= Math.max(0, bottomPadding);
	            touchRect.left-= Math.max(0, leftPadding);
	            touchRect.right+= Math.max(0, rightPadding);
	            
	            //Now we are going to construct the TouchDelegate
	            TouchDelegate touchDelegate = new TouchDelegate(touchRect, delegate);
	            
	            //And set it on the parent
	            parent.setTouchDelegate(touchDelegate);
	            
	        }
		};
	}
	public static boolean containsWhiteSpace(final String testCode){
	    if(testCode != null){
	        for(int i = 0; i < testCode.length(); i++){
	            if(Character.isWhitespace(testCode.charAt(i))){
	                return true;
	            }
	        }
	    }
	    return false;
	}
	
	public static boolean validate(final String password)
	{
		pattern = Pattern.compile(PASSWORD_PATTERN);
		matcher = pattern.matcher(password);
		return matcher.matches();
	    	    
	  }

	 public static boolean isValidPassword(final String password) {

	        Pattern pattern;
	        Matcher matcher;

	        final String PASSWORD_PATTERN = "^(?=.*[0-9])(?=.*[a-z])(?=.*[a-z])(?=.*[@#$%^&+=])(?=\\S+$).{4,}$";

	        pattern = Pattern.compile(PASSWORD_PATTERN);
	        matcher = pattern.matcher(password);

	        return matcher.matches();

	    }
	 public  static boolean isValidEmail(final String email) {
		 Pattern pattern;
	        Matcher matcher;

	        final String PASSWORD_PATTERN = "^(?=.*[a-z])(?=.*[a-z])";

	        pattern = Pattern.compile(PASSWORD_PATTERN);
	        matcher = pattern.matcher(email);

	        return matcher.matches();
		}
	 public static interface fragmentInterface
	    {
	    	public void settext(String text);
	    	
	    }
	 public static void AlertDialog_Logout(Activity activity) {
			AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(activity);

			// set title
			alertDialogBuilder.setTitle("AskConcie");

			// set dialog message
			alertDialogBuilder.setMessage("Are you sure you want to logout?").setCancelable(false).setPositiveButton("Yes", new DialogInterface.OnClickListener() {
				public void onClick(DialogInterface dialog, int id) {
					// GlobalClass.showProgressDialog(DashboardActivity.this,"Please Wait...");
					//preferences.logoutUser();
					//preferences.clearFirsttime();
					
					// GlobalClass.showProgressDialog(DashboardActivity.this,"Please Wait...");
					// new
					// GlobalClass.Logout_Api().execute(preferences.getDeviceToken()
					// , preferences.getUserId());
				}
			}).setNegativeButton("No", new DialogInterface.OnClickListener() {
				public void onClick(DialogInterface dialog, int id) {

					dialog.cancel();
				}
			});

			// create alert dialog
			AlertDialog alertDialog = alertDialogBuilder.create();

			// show it
			alertDialog.show();
		}
	/*public static Drawable drawableFromUrl(final String url) throws IOException
	{

		new Thread() {
			@Override
			public void run() {
				try {
					HttpURLConnection connection = (HttpURLConnection) new URL(url).openConnection();
					connection.connect();
					InputStream input = connection.getInputStream();

					bitmap = BitmapFactory.decodeStream(input);
				}
				catch (Exception e)
				{

				}

			}
		}.start();


		return new BitmapDrawable(bitmap);


	}*/

	public static int getScreenResolution(Context context)
	{
		WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
		Display display = wm.getDefaultDisplay();
		DisplayMetrics metrics = new DisplayMetrics();
		display.getMetrics(metrics);
		int width = metrics.widthPixels;
		int height = metrics.heightPixels;


		return width;
	}
	public static byte[] BitmaptoByteArray(Bitmap bitmap)
	{
		ByteArrayOutputStream bos=new ByteArrayOutputStream();
		bitmap.compress(Bitmap.CompressFormat.PNG, 100, bos);
		byte[] img=bos.toByteArray();
		return  img;
	}
	public static int getXcordinate(ImageView imageview)
	{
		int[] location = new int[2];
		imageview.getLocationOnScreen(location);
		int x = location[0];
		int y = location[1];

		return  x;
	}
	public static  int getYCordinate(ImageView imageview)
	{
		int[] location = new int[2];
		imageview.getLocationOnScreen(location);
		int x = location[0];
		int y = location[1];

		return  y;
	}


	public static void  setLocked(ImageView v)
	{
		ColorMatrix matrix = new ColorMatrix();
		matrix.setSaturation(0);  //0 means grayscale
		ColorMatrixColorFilter cf = new ColorMatrixColorFilter(matrix);
		v.setColorFilter(cf);
		v.setAlpha(200);   // 128 = 0.5
	}
	public static void  setUnlocked(ImageView v)
	{
		v.setColorFilter(null);
		v.setAlpha(255);
	}
	public static void showDatePickerDialog(final Context con){
		final Calendar c = Calendar.getInstance();
		int mYear = c.get(Calendar.YEAR);
		int mMonth = c.get(Calendar.MONTH);
		int mDay = c.get(Calendar.DAY_OF_MONTH);
		final SimpleDateFormat formatter = new SimpleDateFormat("dd.MM.yyyy");
		DatePickerDialog datePickerDialog = new DatePickerDialog(con,
				new DatePickerDialog.OnDateSetListener()
				{
					@Override
					public void onDateSet(DatePicker view, int year,
										  int monthOfYear, int dayOfMonth) {
						String selectedDate = dayOfMonth+"."+(monthOfYear+1)+"."+year;
						Date Dateselected = convertStringToDate(selectedDate);



						callerActivity.onDateSelected(Dateselected);
						//interfaceDateSelected intefaceDialog = (interfaceDateSelected)context;
						//intefaceDialog.onDateSelected(Dateselected);
						/*try
						{
							if(!isFirstDate){
								selectedStartdate=formatter.parse(selectedDate.toString());
								isFirstDate=true;
								interfaceDateSelected intefaceDialog = (interfaceDateSelected)context;
								intefaceDialog.onDateSelected(selectedStartdate,selectedEnddate);
							}
							else {

								if(Dateselected.before(selectedStartdate))
								{
									selectedStartdate=Dateselected;
								}
								else if(Dateselected.after(selectedStartdate))
								{
									selectedEnddate=formatter.parse(selectedDate.toString());
									selectedStartdate=null;
									isFirstDate=false;
								}
								//isFirstDate=false;
								//isStartAndEndSelected =true;
								interfaceDateSelected intefaceDialog = (interfaceDateSelected)context;
								intefaceDialog.onDateSelected(selectedStartdate,selectedEnddate);
							}


						}
						catch (ParseException e)
						{
							e.printStackTrace();
						}*/

					}
				}, mYear, mMonth, mDay);
		datePickerDialog.show();
	}

	/* this is the interface which will get called when clicked on datepicer ok button */
	public interface  interfaceDateSelected
	{
		public void onDateSelected(Date start);
	}
	public static String pad(int c)
	{
		if (c >= 10)
			return String.valueOf(c);
		else
			return "0" + String.valueOf(c);
	}
	public interface TextCallBackListener {
		public void updateText(String val);
	}
	public static String convertDateToString(Date date)
	{
		String dateStr="";
		try
		{
			dateStr = dateFormater.format(date);
		}
		catch (Exception e){

		}

		return  dateStr;
	}
	public static Date convertStringToDate(String date)
	{
		Date convertedDate = new Date();
		try {
			convertedDate = dateFormater.parse(date);
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return  convertedDate;
	}

	public static List<Date> getDatesWithWeekend(String dateString1, String dateString2)
	{
		ArrayList<Date> dates = new ArrayList<Date>();
		DateFormat df1 = new SimpleDateFormat("dd.MM.yyyy");

		Date date1 = null;
		Date date2 = null;

		try {
			date1 = df1 .parse(dateString1);
			date2 = df1 .parse(dateString2);
		} catch (ParseException e) {
			e.printStackTrace();
		}

		Calendar cal1 = Calendar.getInstance();
		cal1.setTime(date1);


		Calendar cal2 = Calendar.getInstance();
		cal2.setTime(date2);

		while(!cal1.after(cal2))
		{
			dates.add(cal1.getTime());
			cal1.add(Calendar.DATE, 1);
		}
		return dates;
	}
	public static void hideSoftKeyboard(SearchView input,Activity activity) {
		input.setInputType(0);
		InputMethodManager imm = (InputMethodManager)activity.getSystemService(Context.INPUT_METHOD_SERVICE);
		imm.hideSoftInputFromWindow(input.getWindowToken(), 0);
	}
	public static String arrayToCommaSeparated(String[] array){
		StringBuilder sb = new StringBuilder();
		for (String n : array) {
			if (sb.length() > 0) sb.append(',');
			sb.append("").append(n).append("");
		}
		return sb.toString();
	}
}
