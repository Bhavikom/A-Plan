Ext.define("Ext.ux.grid.Printer", { requires: "Ext.XTemplate", statics: { print: function (e, t) { var n = e.store.isGrouped ? e.store.isGrouped() : false; var r; if (n) { var i = this.getFeature(e, "grouping"); if (i) r = i.getGroupField(); else n = false } if (e.columnManager) { var s = e.columnManager.getColumns() } else { var s = []; Ext.each(e.columns, function (e) { if (e.items && e.items.length > 0) { s = s.concat(e.items.items) } else { s.push(e) } }) } var o = []; var u = []; Ext.each(s, function (e) { if (e) { if (!Ext.isEmpty(e.dataIndex) && !e.hidden && !n) { u.push(e) } else if (e.xtype === "rownumberer") { if (!e.text) e.text = "Row"; u.push(e) } else if (e.xtype === "templatecolumn") { u.push(e) } else if (n && e.dataIndex !== r && e.xtype !== "actioncolumn") { u.push(e) } } }); s = u; if (this.stylesheetPath === null) { var a = Ext.Loader.getPath("Ext.ux.grid.Printer"); this.stylesheetPath = a.substring(0, a.indexOf("Printer.js")) + "gridPrinterCss/print.css" } var f = Ext.create("Ext.XTemplate", this.headerTpl).apply(s); var l = this.generateBody(e, s, i); var c, h = []; Ext.each(e.plugins, function (e) { if (e.ptype == "rowexpander") { c = e.rowBodyTpl } }); if (c) { h = ['<tr class="{[xindex % 2 === 0 ? "even" : "odd"]}"><td colspan="' + s.length + '">', "{[ this.applyTpl(values) ]}", "</td></tr>"] } var p = e.title ? e.title : this.pageTitle; var d = this.getFeature(e, "summary"); var v = ['<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">', '<html class="' + Ext.baseCSSPrefix + 'ux-grid-printer">', "<head>", '<meta content="text/html; charset=UTF-8" http-equiv="Content-Type" />', '<link href="' + this.stylesheetPath + '" rel="stylesheet" type="text/css" />', "<title>" + p + "</title>", "</head>", '<body class="' + Ext.baseCSSPrefix + 'ux-grid-printer-body">', '<div class="' + Ext.baseCSSPrefix + "ux-grid-printer-noprint " + Ext.baseCSSPrefix + 'ux-grid-printer-links">', '<a class="' + Ext.baseCSSPrefix + 'ux-grid-printer-linkprint" href="javascript:void(0);" onclick="window.print();">' + this.printLinkText + "</a>", '<a class="' + Ext.baseCSSPrefix + 'ux-grid-printer-linkclose" href="javascript:void(0);" onclick="window.close();">' + this.closeLinkText + "</a>", "</div>", "<h1>" + this.mainTitle + "</h1>", "<table>", "<tr>", f, "</tr>", '<tpl for=".">', '<tr class="{[xindex % 2 === 0 ? "even" : "odd"]}">', l, "</tr>", h.join(""), "{% if (this.isGrouped && xindex > 0) break; %}", "</tpl>", '<tpl if="this.hasSummary">', "<tr>", '<tpl for="this.columns">', "{[ this.renderSummary(values, xindex) ]}", "</tpl>", "</tr>", "</tpl>", "</table>", "</body>", "</html>", { isGrouped: n, grid: e, columns: s, hasSummary: Ext.isObject(d), summaryFeature: d, expanderTemplate: c, renderColumn: function (t, n, r, i) { var s = { align: t.align, cellIndex: i, classes: [], column: t, innerCls: "", record: r, recordIndex: e.store.indexOf ? e.store.indexOf(r) : undefined, style: "", tdAttr: "", tdCls: "", unselectableAttr: 'unselectable="on"', value: n }; if (t.xtype == "templatecolumn") { n = t.tpl ? t.tpl.apply(r.data) : n } else if (t.renderer) { if (t instanceof Ext.tree.Column) { n = t.renderer.call(t, n, s, r, -1, i - 1, this.grid.store, this.grid.view) } else { n = t.renderer.call(this.grid, n, s, r, -1, i - 1, this.grid.store, this.grid.view) } } return this.getHtml(n, s) }, applyTpl: function (e) { var t = this.expanderTemplate.apply(e.data); return t }, renderSummary: function (e, t) { var n; if (this.summaryFeature.remoteRoot) { var r = this.summaryFeature.summaryRecord || new this.grid.view.store.model(null, this.grid.view.id + "-summary-record"); if (this.grid.view.store.proxy.reader.rawData) { if (Ext.isArray(this.grid.view.store.proxy.reader.rawData[this.summaryFeature.remoteRoot])) r.set(this.grid.view.store.proxy.reader.rawData[this.summaryFeature.remoteRoot][0]); else r.set(this.grid.view.store.proxy.reader.rawData[this.summaryFeature.remoteRoot]) } n = r.get(e.dataIndex) } else { n = this.getSummary(this.grid.store, e.summaryType, e.dataIndex, false) } if (e.summaryRenderer) { var i; if (Ext.getVersion().isLessThan("4.2.0")) { i = this.getSummaryObject(e.align); n = e.summaryRenderer.call(e, n, i, e.dataIndex); return this.getHtml(n, i) } else { var s = this.getSummaryRecord42(); var i = this.getSummaryObject42(n, e, t, s); n = e.summaryRenderer.call(this.grid, n, i, s, -1, t, this.grid.store, this.grid.view); return this.getHtml(n, i) } } else { var o = this.getSummaryObject42(e, t); if (n === undefined || n == 0) return this.getHtml("&nbsp;", o); else return this.getHtml(n, o) } }, getSummaryObject: function (e) { var t = {}; for (var n = 0; n < s.length; n++) { var r = this.getSummary(this.grid.store, this.columns[n].summaryType, this.columns[n].dataIndex, false); if (r === undefined) continue; else t[s[n].id] = r } t["style"] = "text-align:" + e + ";"; return t }, getSummaryRecord42: function () { if (this.summaryFeature.remoteRoot) { var e = this.summaryFeature.summaryRecord || new this.grid.view.store.model(null, this.grid.view.id + "-summary-record"); if (this.grid.view.store.proxy.reader.rawData) { if (Ext.isArray(this.grid.view.store.proxy.reader.rawData[this.summaryFeature.remoteRoot])) e.set(this.grid.view.store.proxy.reader.rawData[this.summaryFeature.remoteRoot][0]); else e.set(this.grid.view.store.proxy.reader.rawData[this.summaryFeature.remoteRoot]) } return e } var t = Ext.create(this.grid.store.model); for (var n = 0; n < this.columns.length; n++) { var r = this.getSummary(this.grid.store, this.columns[n].summaryType, this.columns[n].dataIndex, false); if (r === undefined) continue; else t.set(this.columns[n].dataIndex, r) } return t }, getSummaryObject42: function (e, t, n, r) { return { align: t.align, cellIndex: n, column: t, classes: [], innerCls: "", record: r, recordIndex: -1, style: "", tdAttr: "", tdCls: "", unselectableAttr: 'unselectable="on"', value: e } }, getSummary: function (e, t, n, r) { if (t) { if (Ext.isFunction(t)) { return e.aggregate(t, null, r, [n]) } switch (t) { case "count": return e.count(r); case "min": return e.min(n, r); case "max": return e.max(n, r); case "sum": return e.sum(n, r); case "average": return e.average(n, r); default: return r ? {} : "" } } }, getHtml: function (e, t) { if (e == undefined) e = "&nbsp;"; var n = "<td "; if (t.tdCls) n += 'class="' + t.tdCls + '"'; if (t.tdAttr) n += " " + t.tdAttr; n += "><div "; if (t.innerCls) n += 'class="' + t.innerCls + '"'; n += ' style="text-align: ' + t.align + ";"; if (t.style) n += t.style; n += '" '; if (t.unselectableAttr) n += t.unselectableAttr; n += ">" + e + "</div></td>"; return n } }]; var m; if (e.store instanceof Ext.data.TreeStore) { m = []; e.store.getRootNode().cascadeBy(function (e) { if (!e.isVisible()) return; m.push(e) }, this) } else { m = e.store.getRange() } var g = Ext.create("Ext.XTemplate", v).apply(m); var y = window.open("", "printgrid"); y.document.open(); y.document.write(g); y.document.close(); if (this.printAutomatically) { y.print() } if (this.closeAutomaticallyAfterPrint) { if (Ext.isIE) { window.close() } else { y.close() } } }, getFeature: function (e, t) { var n = e.getView(); var r = n.features; if (r) for (var i = 0; i < r.length; i++) { if (t == "grouping") if (r[i].ftype == "grouping" || r[i].ftype == "groupingsummary") return r[i]; if (t == "groupingsummary") if (r[i].ftype == "groupingsummary") return r[i]; if (t == "summary") if (r[i].ftype == "summary") return r[i] } return undefined }, generateBody: function (e, t, n) { var r = []; var i = e.store.getProxy().getModel().getFields(); var s = true; var o; var u; var a = this.getFeature(e, "groupingsummary"); if (e instanceof Ext.grid.Panel) { r = e.store.getGroups() } if (r.length && e.store.isGrouped() && n) { s = n.hideGroupedHeader; o = n.getGroupField(); var f; Ext.each(e.columns, function (e) { if (e.dataIndex == o) f = e }); if (!n || !i || !o) { return } if (s) { var l = function (e) { return e.name != o }; i = i.filter(l) } var c = n.groupHeaderTpl.html || ""; var h = ['<tpl for=".">', '<tr class="group-header">', '<td colspan="{[this.colSpan]}">', "{[ this.applyGroupTpl(values) ]}", "</td>", "</tr>", '<tpl for="children">', '<tr class="{[xindex % 2 === 0 ? "even" : "odd"]}">', '<tpl for="this.columns">', "{[ this.renderColumn(values, parent.get(values.dataIndex), parent, xindex) ]}", "</tpl>", "</tr>", "</tpl>", '<tpl if="this.hasSummary">', "<tr>", '<tpl for="this.columns">', "{[ this.renderSummary(values, xindex) ]}", "</tpl>", "</tr>", "</tpl>", "</tpl>", { columns: t, groupColumn: f, colSpan: t.length, grid: e, groupName: "", groupTpl: n.groupHeaderTpl, hasSummary: Ext.isObject(a) && a.showSummaryRow, summaryFeature: a, childCount: function (e) { return e.length }, renderColumn: function (t, n, r, i) { var s = { align: t.align, cellIndex: i, classes: [], column: t, innerCls: "", record: r, recordIndex: e.store.indexOf(r), style: "", tdAttr: "", tdCls: "", unselectableAttr: 'unselectable="on"', value: n }; if (t.renderer) n = t.renderer.call(this.grid, n, s, r, -1, i - 1, this.grid.store, this.grid.view); return this.getHtml(n, s) }, getHtml: function (e, t) { if (e == undefined || e == 0) e = "&nbsp;"; var n = "<td "; if (t.tdCls) n += 'class="' + t.tdCls + '"'; if (t.tdAttr) n += " " + t.tdAttr; n += "><div "; if (t.innerCls) n += 'class="' + t.innerCls + '"'; n += ' style="text-align: ' + t.align + ";"; if (t.style) n += t.style; n += '" '; if (t.unselectableAttr) n += t.unselectableAttr; n += ">" + e + "</div></td>"; return n }, renderSummary: function (e, t) { var n; var r; if (this.summaryFeature.remoteRoot) { var i = this.summaryFeature.summaryRecord || new this.grid.view.store.model(null, this.grid.view.id + "-summary-record"); if (this.grid.view.store.proxy.reader.rawData) { if (Ext.isArray(this.grid.view.store.proxy.reader.rawData[this.summaryFeature.remoteRoot])) i.set(this.getSummaryRcd(this.grid.view.store.proxy.reader.rawData[this.summaryFeature.remoteRoot], this.grid.store.groupField, this.groupName)); else i.set(this.grid.view.store.proxy.reader.rawData[this.summaryFeature.remoteRoot]) } n = i.get(e.dataIndex) } else { n = this.getSummary(this.grid.store, e.summaryType, e.dataIndex, this.grid.store.isGrouped()) } if (Ext.isObject(n)) n = n[this.groupName]; if (e.summaryRenderer) if (Ext.getVersion().isLessThan("4.2.0")) { n = e.summaryRenderer.call(e, n, this.getSummaryObject(e.align), e.dataIndex) } else { r = this.getSummaryObject42(e, t); n = e.summaryRenderer.call(this.grid, n, this.getSummaryObject42(e, t), this.getSummaryRecord42(), -1, t, this.grid.store, this.grid.view); return this.getHtml(n, r) } else if (n == undefined || n == 0) n = "&nbsp;"; return "<td><div>" + n + "</div></td>" }, applyGroupTpl: function (e) { this.groupName = e.name; e.groupField = this.grid.store.groupField; var t = { align: "", cellIndex: -1, classes: [], column: this.groupColumn, innerCls: "", record: e.children[0], recordIndex: this.grid.store.indexOf(e.children[0]), style: "", tdAttr: "", tdCls: "", unselectableAttr: 'unselectable="on"', value: e.name }; if (this.groupColumn) e.columnName = this.groupColumn.text; else e.columnName = this.groupField; e.groupValue = e.name; if (this.groupColumn && this.groupColumn.renderer) { e.renderedGroupValue = this.groupColumn.renderer.call(this.grid, e.name, t, e.children[0], -1, -1, this.grid.store, this.grid.view) } else e.renderedGroupValue = e.name; e.rows = null; return this.groupTpl.apply(e) }, getSummaryObject: function (e) { var n = {}; for (var r = 0; r < this.columns.length; r++) { var i = this.getSummary(this.grid.store, this.columns[r].summaryType, this.columns[r].dataIndex, this.grid.store.isGrouped()); if (i === undefined) continue; else if (Ext.isObject(i)) n[t[r].id] = i[this.groupName]; else n[t[r].id] = i } n["style"] = "text-align:" + e + ";"; return n }, getSummaryRecord42: function () { var e = Ext.create(this.grid.store.model); for (var t = 0; t < this.columns.length; t++) { var n = this.getSummary(this.grid.store, this.columns[t].summaryType, this.columns[t].dataIndex, this.grid.store.isGrouped()); if (n === undefined) continue; else if (Ext.isObject(n)) e.set(this.columns[t].dataIndex, n[this.groupName]); else e.set(this.columns[t].dataIndex, n) } return e }, getSummaryObject42: function (e, t) { return { align: e.align, cellIndex: t, classes: [], innerCls: "", record: this.getSummaryRecord42(), recordIndex: -1, style: "", tdAttr: "", tdCls: "", unselectableAttr: 'unselectable="on"', value: "&#160;" } }, getSummary: function (e, t, n, r) { if (t) { if (Ext.isFunction(t)) { return e.aggregate(t, null, r, [n]) } switch (t) { case "count": return e.count(r); case "min": return e.min(n, r); case "max": return e.max(n, r); case "sum": return e.sum(n, r); case "average": return e.average(n, r); default: return r ? {} : "" } } }, getSummaryRcd: function (e, t, n) { if (Ext.isArray(e)) { for (var r = 0; r < e.length; r++) { if (e[r][t] && e[r][t] == n) return e[r] } return undefined } else if (e.data[t]) return e; else return undefined } }]; u = Ext.create("Ext.XTemplate", h).apply(r) } else { var h = ['<tpl for="this.columns">', "{[ this.renderColumn(values, parent.get(values.dataIndex), parent, xindex) ]}", "</tpl>"]; u = h.join("") } return u }, stylesheetPath: null, printAutomatically: false, closeAutomaticallyAfterPrint: false, pageTitle: "Print View", mainTitle: "", printLinkText: "Print", closeLinkText: "Close", headerTpl: ['<tpl for=".">', '<th style="text-align: {align}">{text}</th>', "</tpl>"], bodyTpl: ['<tpl for="columns">', "{[ this.renderColumn(values, parent.get(values.dataIndex), parent, xindex) ]}", "</tpl>"] } })