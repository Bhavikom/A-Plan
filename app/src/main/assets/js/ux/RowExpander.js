Ext.define("Ext.ux.RowExpander", { extend: "Ext.AbstractPlugin", lockableScope: "normal", requires: ["Ext.grid.feature.RowBody", "Ext.grid.feature.RowWrap"], alias: "plugin.rowexpander", rowBodyTpl: null, expandOnEnter: !0, expandOnDblClick: !0, selectRowOnExpand: !1, rowBodyTrSelector: ".x-grid-rowbody-tr", rowBodyHiddenCls: "x-grid-row-body-hidden", rowCollapsedCls: "x-grid-row-collapsed", constructor: function () { var e, o, r, d = this; d.callParent(arguments), e = d.getCmp(), d.recordsExpanded = {}, d.rowBodyTpl || Ext.Error.raise("The 'rowBodyTpl' config is required and is not defined."), d.rowBodyTpl = Ext.XTemplate.getTpl(d, "rowBodyTpl"), o = this.rowBodyTpl, r = [{ ftype: "rowbody", lockableScope: "normal", columnId: d.getHeaderId(), recordsExpanded: d.recordsExpanded, rowBodyHiddenCls: d.rowBodyHiddenCls, rowCollapsedCls: d.rowCollapsedCls, getAdditionalData: d.getRowBodyFeatureData, getRowBodyContents: function (e) { return o.applyTemplate(e) } }, { ftype: "rowwrap", lockableScope: "normal" }, { ftype: "feature", lockableScope: "locked", getAdditionalData: function (e, o, r, t) { d.recordsExpanded[r.internalId] || (t.rowCls = (t.rowCls || "") + " " + d.rowCollapsedCls) } }], e.features = e.features ? Ext.Array.push(r, e.features) : r }, init: function (e) { var o = this, r = e; o.callParent(arguments), o.grid = e, o.view = e.getView(), o.addExpander(), o.bindView(o.view), r.ownerLockable && (r = r.ownerLockable, o.bindView(r.lockedGrid.getView())), r.on("beforereconfigure", o.beforeReconfigure, o) }, beforeReconfigure: function (e, o, r) { var d = this.getHeaderConfig(); d.locked = !0, r.unshift(d) }, addExpander: function () { var e = this, o = e.grid, r = e.getHeaderConfig(); o.ownerLockable && (o = o.ownerLockable.lockedGrid, o.width += r.width), o.headerCt.insert(0, r) }, getHeaderId: function () { return this.headerId || (this.headerId = Ext.id()), this.headerId }, getRowBodyFeatureData: function (e, o, r, d) { var t = this, n = t.self.prototype.getAdditionalData.apply(this, arguments), l = t.columnId; return n.rowBodyColspan = n.rowBodyColspan - 1, n.rowBody = t.getRowBodyContents(e), n.rowCls = t.recordsExpanded[r.internalId] ? "" : t.rowCollapsedCls, n.rowBodyCls = t.recordsExpanded[r.internalId] ? "" : t.rowBodyHiddenCls, n[l + "-tdAttr"] = ' valign="top" rowspan="2" ', d[l + "-tdAttr"] && (n[l + "-tdAttr"] += d[l + "-tdAttr"]), n }, bindView: function (e) { this.expandOnEnter && e.on("itemkeydown", this.onKeyDown, this), this.expandOnDblClick && e.on("itemdblclick", this.onDblClick, this) }, onKeyDown: function (e, o, r, d, t) { if (t.getKey() == t.ENTER) for (var n = e.store, l = e.getSelectionModel().getSelection(), i = l.length, a = 0; i > a; a++) d = n.indexOf(l[a]), this.toggleRow(d, l[a]) }, onDblClick: function (e, o, r, d) { this.toggleRow(d, o) }, toggleRow: function (e, o) { var r, d = this, t = d.view, n = t.getNode(e), l = Ext.fly(n, "_rowExpander"), i = l.down(d.rowBodyTrSelector, !0), a = l.hasCls(d.rowCollapsedCls), s = a ? "removeCls" : "addCls"; Ext.suspendLayouts(), l[s](d.rowCollapsedCls), Ext.fly(i)[s](d.rowBodyHiddenCls), d.recordsExpanded[o.internalId] = a, t.refreshSize(), t.fireEvent(a ? "expandbody" : "collapsebody", l.dom, o, i), d.grid.ownerLockable && (t = d.grid.ownerLockable.lockedGrid.view, r = l.getHeight(), l = Ext.fly(t.getNode(e), "_rowExpander"), l.setHeight(r), l[s](d.rowCollapsedCls), t.refreshSize()), Ext.resumeLayouts(!0) }, getHeaderConfig: function () { var e = this; return { id: e.getHeaderId(), width: 24, lockable: !1, sortable: !1, resizable: !1, draggable: !1, hideable: !1, menuDisabled: !0, cls: Ext.baseCSSPrefix + "grid-header-special", renderer: function (e, o) { return o.tdCls = Ext.baseCSSPrefix + "grid-cell-special", '<div class="' + Ext.baseCSSPrefix + 'grid-row-expander">&#160;</div>' }, processEvent: function (o, r, d, t, n, l, i) { return "mousedown" == o && l.getTarget(".x-grid-row-expander") ? (e.toggleRow(t, i), e.selectRowOnExpand) : void 0 } } } });